global
    maxconn 4096
    log 10.42.24.10:1514 local2

defaults
    log global
    timeout connect  5000
    timeout client  10000
    timeout server  10000

resolvers dns
    nameserver rancher 169.254.169.250:53
    hold valid 1s

listen statistics
    bind *:8008
    mode http
    stats enable
    stats uri /stats

listen postgres_rw
    bind *:5432
    mode tcp
    option tcp-smart-connect
    timeout client  10800s
    timeout server  10800s
    balance leastconn
{{range ls "/self/stack/services/postgres/containers"}}
    server {{.}} {{.}}:5432 resolvers dns check fastinter 1s
{{end}}

    option tcp-check

    # https://www.postgresql.org/docs/devel/static/protocol-message-formats.html can help you understand the following
    tcp-check comment     sending\ StartUp\ message
    tcp-check send-binary 00000008 # StartUp Message Length
    tcp-check send-binary 04d2162f # StartUp Message (protocol version number)
    tcp-check comment     StartUp\ message\ sent.
    tcp-check expect binary 4e
    tcp-check comment     Received\ N\ (OK)

    tcp-check comment     sending\ authentication\ message
    tcp-check send-binary 0000005d # lenght of msg + headers
    tcp-check send-binary 00030000 # Int32(196608) to tell I'm a StartupMessage (F)
    tcp-check send        user
    tcp-check send-binary 00
    tcp-check send        postgres
    tcp-check send-binary 00
    tcp-check send        database
    tcp-check send-binary 00
    tcp-check send        postgres
    tcp-check send-binary 00
    tcp-check send        application_name
    tcp-check send-binary 00
    tcp-check send        haproxy-check
    tcp-check send-binary 00
    tcp-check send        client_encoding
    tcp-check send-binary 00
    tcp-check send        UTF8
    tcp-check send-binary 00
    tcp-check comment     sending\ last\ authentication\ byte
    tcp-check send-binary 00
    tcp-check comment     authentication\ message\ sent.
    tcp-check expect rstring ^R
    tcp-check comment     received\ answer\ with\ R\ (OK)

    tcp-check comment     sending\ QUERY\ slave\ or\ master?
    tcp-check send        Q         # Query
    tcp-check send-binary 00000053  # Int32 Lenght of the query + header
    tcp-check send        SELECT\ CASE\ WHEN\ pg_is_in_recovery()\ THEN\ \'i_am_slave\'\ ELSE\ \'i_am_master\'\ END;
    tcp-check send-binary 00        # End Query with a zero-byte.
    tcp-check comment     Query\ sent.\ Waiting\ response.
    tcp-check expect string i_am_master
    tcp-check comment     received\ string\ i_am_master.\ Sending\ termination\ message
    tcp-check send        X         # Termination message
    tcp-check send-binary 00000004  # Int32(4) lenght of Termination message


listen postgres_ro
    bind *:5433
    mode tcp
    option tcp-smart-connect
    timeout client  10800s
    timeout server  10800s
    balance leastconn
{{range ls "/self/stack/services/postgres/containers"}}
    server {{.}} {{.}}:5432 resolvers dns check fastinter 1s
{{end}}

    option tcp-check
    tcp-check connect port 5432

    tcp-check comment     sending\ StartUp\ message
    tcp-check send-binary 00000008 # StartUp Message Length
    tcp-check send-binary 04d2162f # StartUp Message (protocol version number)
    tcp-check comment     StartUp\ message\ sent.
    tcp-check expect binary 4e
    tcp-check comment     Received\ N\ (OK)

    tcp-check comment     sending\ authentication\ message
    tcp-check send-binary 0000005d # lenght of msg + headers
    tcp-check send-binary 00030000 # Int32(196608) to tell I'm a StartupMessage (F)
    tcp-check send        user
    tcp-check send-binary 00
    tcp-check send        postgres
    tcp-check send-binary 00
    tcp-check send        database
    tcp-check send-binary 00
    tcp-check send        postgres
    tcp-check send-binary 00
    tcp-check send        application_name
    tcp-check send-binary 00
    tcp-check send        haproxy-check
    tcp-check send-binary 00
    tcp-check send        client_encoding
    tcp-check send-binary 00
    tcp-check send        UTF8
    tcp-check send-binary 00
    tcp-check comment     sending\ last\ authentication\ byte
    tcp-check send-binary 00
    tcp-check comment     authentication\ message\ sent.
    tcp-check expect rstring ^R
    tcp-check comment     received\ answer\ with\ R\ (OK)

    tcp-check comment     sending\ QUERY\ slave\ or\ master?
    tcp-check send        Q         # Query
    tcp-check send-binary 00000053  # Int32 Lenght of the query + header
    tcp-check send        SELECT\ CASE\ WHEN\ pg_is_in_recovery()\ THEN\ \'i_am_slave\'\ ELSE\ \'i_am_master\'\ END;
    tcp-check send-binary 00        # End Query with a zero-byte.
    tcp-check comment     Query\ sent.\ Waiting\ response.
    tcp-check expect string i_am_slave
    tcp-check comment     received\ string\ i_am_master.\ Sending\ termination\ message
    tcp-check send        X         # Termination message
    tcp-check send-binary 00000004  # Int32(4) lenght of Termination message
